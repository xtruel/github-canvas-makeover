name: Backend CI

on:
  push:
    branches: [ main, 'feature/*' ]
    paths: [ 'backend/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'backend/**' ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: canvas_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://user:password@localhost:5432/canvas_db_test

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://user:password@localhost:5432/canvas_db_test

      - name: Build application
        run: npm run build

      - name: Run tests
        run: npm run test:run
        env:
          DATABASE_URL: postgresql://user:password@localhost:5432/canvas_db_test

      # TODO: Add linting step when ESLint/Prettier config is added
      # - name: Lint code
      #   run: npm run lint

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -f backend/Dockerfile -t canvas-backend:${{ github.sha }} .
          
      # TODO: Add Docker image push to registry when credentials are configured
      # - name: Push to registry
      #   run: |
      #     echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      #     docker tag canvas-backend:${{ github.sha }} ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
      #     docker push ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
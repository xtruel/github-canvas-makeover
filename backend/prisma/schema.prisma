generator client { provider = "prisma-client-js" }\n\ndatasource db { provider = "postgresql" url = env("DATABASE_URL") }\n\nenum Role { USER ADMIN }\n\nenum ArticleStatus { DRAFT PUBLISHED }\n\nenum MediaStatus { PENDING READY }\n\nenum MediaType { IMAGE VIDEO }\n\nmodel User { id String @id @default(cuid()) email String @unique passwordHash String role Role @default(USER) createdAt DateTime @default(now()) updatedAt DateTime @updatedAt articles Article[] media MediaAsset[] auditLogs AuditLog[] }\n\nmodel Article { id String @id @default(cuid()) title String slug String @unique body String language String @default("it") status ArticleStatus @default(DRAFT) coverMediaId String? coverMedia MediaAsset? @relation(fields: [coverMediaId], references: [id]) authorId String author User @relation(fields: [authorId], references: [id]) publishedAt DateTime? createdAt DateTime @default(now()) updatedAt DateTime @updatedAt }\n\nmodel MediaAsset { id String @id @default(cuid()) type MediaType status MediaStatus @default(PENDING) originalPath String originalUrl String thumbnailUrl String? width Int? height Int? durationSeconds Int? uploadedById String uploadedBy User @relation(fields: [uploadedById], references: [id]) createdAt DateTime @default(now()) updatedAt DateTime @updatedAt articles Article[] @relation("Article_coverMediaId") }\n\nmodel AuditLog { id String @id @default(cuid()) userId String? user User? @relation(fields: [userId], references: [id]) action String entityType String entityId String? diff Json? createdAt DateTime @default(now()) }\n
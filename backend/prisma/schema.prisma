datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums removed for SQLite compatibility

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String?
  role           String          @default("USER")
  passwordHash   String?
  // articles     Article[]      // removed to avoid missing back relation
  posts          CommunityPost[]
  comments       Comment[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model MediaAsset {
  id              String          @id @default(cuid())
  type            String
  status          String          @default("PENDING")
  originalPath    String
  originalUrl     String
  mimeType        String
  width           Int?
  height          Int?
  durationSeconds Int?
  createdAt       DateTime       @default(now())
  articleCover    Article[]       @relation("ArticleCover")
  posts           CommunityPost[]
}

model Article {
  id             String          @id @default(cuid())
  title          String
  body           String
  slug           String          @unique
  status         String          @default("DRAFT")
  language       String
  coverMediaId   String?
  coverMedia     MediaAsset?     @relation("ArticleCover", fields: [coverMediaId], references: [id])
  publishedAt    DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  comments       Comment[]
}

model CommunityPost {
  id             String          @id @default(cuid())
  userId         String
  user           User            @relation(fields: [userId], references: [id])
  type           String
  title          String
  body           String?
  mediaId        String?
  media          MediaAsset?     @relation(fields: [mediaId], references: [id])
  status         String          @default("PUBLISHED")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Comment {
  id         String   @id @default(cuid())
  articleId  String
  article    Article  @relation(fields: [articleId], references: [id])
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  authorName String
  body       String
  createdAt  DateTime @default(now())
  status     String   @default("PENDING")
}

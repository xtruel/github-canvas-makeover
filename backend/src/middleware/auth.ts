import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\nimport { env } from '../config/env.js';\nimport { prisma } from '../prisma.js';\nexport interface AuthRequest extends Request { user?: { id: string; role: string; email: string }; }\nexport function authOptional() { return async (req: AuthRequest, _res: Response, next: NextFunction) => { const token = req.cookies?.token; if (!token) return next(); try { const payload = jwt.verify(token, env.JWT_SECRET) as any; req.user = { id: payload.sub, role: payload.role, email: payload.email }; } catch { } next(); }; }\nexport function authRequired() { return async (req: AuthRequest, res: Response, next: NextFunction) => { const token = req.cookies?.token; if (!token) return res.status(401).json({ error: 'Unauthenticated' }); try { const payload = jwt.verify(token, env.JWT_SECRET) as any; req.user = { id: payload.sub, role: payload.role, email: payload.email }; next(); } catch { return res.status(401).json({ error: 'Invalid token' }); } }; }\nexport async function seedAdminIfMissing() { if (!env.ADMIN_EMAIL || !env.ADMIN_PASSWORD) return; const existing = await prisma.user.findUnique({ where: { email: env.ADMIN_EMAIL } }); if (!existing) { const bcrypt = await import('bcryptjs'); const passwordHash = bcrypt.default.hashSync(env.ADMIN_PASSWORD, 10); await prisma.user.create({ data: { email: env.ADMIN_EMAIL, passwordHash, role: 'ADMIN' } }); } }\n
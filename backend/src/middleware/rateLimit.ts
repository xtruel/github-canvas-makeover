import { Request, Response, NextFunction } from 'express';\ninterface Counter { count: number; resetAt: number; }\nconst store = new Map<string, Counter>();\nexport function rateLimit(opts = { limit: 100, windowMs: 15 * 60 * 1000 }) { return (req: Request, res: Response, next: NextFunction) => { if (process.env.RATE_LIMIT_ENABLED === 'false') return next(); const key = req.ip; const now = Date.now(); const entry = store.get(key); if (!entry || entry.resetAt < now) { store.set(key, { count: 1, resetAt: now + opts.windowMs }); return next(); } entry.count++; if (entry.count > opts.limit) { const retry = Math.ceil((entry.resetAt - now) / 1000); res.setHeader('Retry-After', retry.toString()); return res.status(429).json({ error: 'Too many requests' }); } next(); }; }\n
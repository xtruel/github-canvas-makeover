import path from 'path';\nimport fs from 'fs/promises';\nimport { StorageProvider, PresignResult } from './StorageProvider.js';\nconst LOCAL_ROOT = path.join(process.cwd(), 'src', 'uploads');\nexport class LocalStorageProvider implements StorageProvider { constructor() { fs.mkdir(LOCAL_ROOT, { recursive: true }).catch(() => {}); }\n  async getPresignedPutUrl(relativePath: string, _mime: string, _exp: number): Promise<PresignResult> { return { uploadUrl: `/__local_upload/${encodeURIComponent(relativePath)}`, path: relativePath, publicUrl: `/media/local/${encodeURIComponent(relativePath)}` }; }\n  getPublicUrl(relativePath: string): string { return `/media/local/${encodeURIComponent(relativePath)}`; }\n  async saveLocal(relativePath: string, data: Buffer) { const full = path.join(LOCAL_ROOT, relativePath); await fs.mkdir(path.dirname(full), { recursive: true }); await fs.writeFile(full, data); }\n  async verifyObject(relativePath: string): Promise<boolean> { try { const full = path.join(LOCAL_ROOT, relativePath); await fs.stat(full); return true; } catch { return false; } }\n}
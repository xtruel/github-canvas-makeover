/* Responsive Fixes for Mobile Viewport Issues
 * Prevents horizontal overflow and constrains map containers
 * Addresses "phone inside margins" layout issues on mobile
 */

/* Global defensive measures for horizontal overflow */
html {
  overflow-x: hidden;
  width: 100%;
  box-sizing: border-box;
}

body {
  overflow-x: hidden;
  width: 100%;
  box-sizing: border-box;
}

/* Apply border-box to all elements for predictable sizing */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Constrain map containers to prevent overflow */
#map,
.map,
.map-wrapper,
.leaflet-container,
.leaflet-map-pane,
.mapboxgl-map,
.gm-style {
  width: 100% !important;
  max-width: 100% !important;
  min-width: 0 !important;
  overflow: hidden !important;
}

/* Specifically target mapbox canvas elements */
.mapboxgl-canvas {
  width: 100% !important;
  max-width: 100% !important;
}

/* Prevent media elements from causing overflow */
img,
video,
iframe,
embed,
object {
  max-width: 100%;
  height: auto;
}

/* Utility class to safely use full viewport width without overflow */
.full-bleed {
  width: 100%;
  max-width: 100%;
  margin-left: auto;
  margin-right: auto;
}

/* Guard against utility classes that might use 100vw */
.w-screen,
.min-w-screen {
  width: 100% !important;
  min-width: 100% !important;
}

/* Safe area utility for devices with notches */
.use-safe-area {
  padding-left: env(safe-area-inset-left);
  padding-right: env(safe-area-inset-right);
  padding-top: env(safe-area-inset-top);
  padding-bottom: env(safe-area-inset-bottom);
}

/* Scalable card with containment to prevent transform overflow */
.scalable-card {
  contain: layout paint;
  will-change: transform;
  transform-origin: center center;
}

/* Desktop-only hover scaling - only activates on devices with fine pointers */
@media (hover: hover) and (pointer: fine) {
  .enable-desktop-hover-scale:hover {
    transform: scale(1.05);
  }
}

/* Disable scaling on touch devices */
@media (hover: none), (pointer: coarse) {
  .enable-desktop-hover-scale {
    transform: none !important;
  }
}

/* Text wrapping for long content */
p, h1, h2, h3, h4, h5, h6, .card, .card * {
  overflow-wrap: anywhere;
  word-break: break-word;
}

/* Debug helpers - activate by adding data-debug-overflow to <html> */
html[data-debug-overflow] * {
  outline: 1px solid rgba(255, 0, 0, 0.2) !important;
}

html[data-debug-overflow] *:hover {
  outline: 2px solid red !important;
}

/* Debug helper to highlight elements wider than viewport */
html[data-debug-overflow] .debug-overflow {
  position: relative;
}

html[data-debug-overflow] .debug-overflow::after {
  content: 'OVERFLOW: ' attr(data-width);
  position: absolute;
  top: 0;
  right: 0;
  background: red;
  color: white;
  padding: 2px 4px;
  font-size: 10px;
  z-index: 10000;
}

/*
Debug JavaScript snippet (paste in browser console):
[...document.querySelectorAll('*')].filter(e => e.scrollWidth > document.documentElement.clientWidth).forEach(e => {
  e.classList.add('debug-overflow');
  e.setAttribute('data-width', e.scrollWidth + 'px');
  console.log('Overflow element:', e, 'Width:', e.scrollWidth);
});
*/